C251 COMPILER V5.60.0,  EEPROM                                                             11/08/22  14:36:07  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN .\obj\EEPROM.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE src\EEPROM.c XSMALL INTR2 INCDIR(.\src;.\src\inc;.\src\usb) DEBUG PRIN
                    -T(.\obj\EEPROM.lst) TABS(2) OBJECT(.\obj\EEPROM.obj) 

stmt  level    source

    1          
    2          /*------------------------------------------------------------------*/
    3          /* --- STC MCU International Limited -------------------------------*/
    4          /* --- STC 1T Series MCU RC Demo -----------------------------------*/
    5          /* --- Mobile: (86)13922805190 -------------------------------------*/
    6          /* --- Fax: 86-0513-55012956,55012947,55012969 ---------------------*/
    7          /* --- Tel: 86-0513-55012928,55012929,55012966 ---------------------*/
    8          /* --- Web: www.GXWMCU.com -----------------------------------------*/
    9          /* --- QQ:  800003751 ----------------------------------------------*/
   10          /* If you want to use the program or the program referenced in the  */
   11          /* article, please specify in which data and procedures from STC    */
   12          /*------------------------------------------------------------------*/
   13          
   14          
   15          //  本程序是STC32G系列的内置EEPROM读写程序。
   16          
   17          #include "eeprom.h"
   18          
   19          #define     IAP_STANDBY()   IAP_CMD = 0     //IAP空闲命令（禁止）
   20          #define     IAP_READ()      IAP_CMD = 1     //IAP读出命令
   21          #define     IAP_WRITE()     IAP_CMD = 2     //IAP写入命令
   22          #define     IAP_ERASE()     IAP_CMD = 3     //IAP擦除命令
   23          
   24          #define     IAP_ENABLE()    IAP_CONTR = IAP_EN; IAP_TPS = MAIN_Fosc / 1000000
   25          #define     IAP_DISABLE()   IAP_CONTR = 0; IAP_CMD = 0; IAP_TRIG = 0; IAP_ADDRE = 0xff; IAP_ADDRH = 0xff;
             - IAP_ADDRL = 0xff
   26          
   27          #define IAP_EN          (1<<7)
   28          #define IAP_SWBS        (1<<6)
   29          #define IAP_SWRST       (1<<5)
   30          #define IAP_CMD_FAIL    (1<<4)
   31          
   32          
   33          //========================================================================
   34          // 函数: void ISP_Disable(void)
   35          // 描述: 禁止访问ISP/IAP.
   36          // 参数: non.
   37          // 返回: non.
   38          // 版本: V1.0, 2012-10-22
   39          //========================================================================
   40          void  DisableEEPROM(void) //禁止访问EEPROM
   41          {
   42   1        IAP_CONTR = 0;      //禁止ISP/IAP操作
   43   1        IAP_CMD   = 0;      //去除ISP/IAP命令
   44   1        IAP_TRIG  = 0;      //防止ISP/IAP命令误触发
   45   1        IAP_ADDRE = 0xff;       //将地址设置到非 IAP 区域
   46   1        IAP_ADDRH = 0xff;   //清0地址高字节
   47   1        IAP_ADDRL = 0xff;   //清0地址低字节，指向非EEPROM区，防止误操作
   48   1      }
   49          
   50          //========================================================================
   51          // 函数: void EEPROM_Trig(void)
   52          // 描述: 触发EEPROM操作.
   53          // 参数: none.
   54          // 返回: none.
   55          // 版本: V1.0, 2014-6-30
   56          //========================================================================
   57          void EEPROM_Trig(void)
C251 COMPILER V5.60.0,  EEPROM                                                             11/08/22  14:36:07  PAGE 2   

   58          {
   59   1          F0 = EA;    //保存全局中断
   60   1          EA = 0;     //禁止中断, 避免触发命令无效
   61   1          IAP_TRIG = 0x5A;
   62   1          IAP_TRIG = 0xA5;                    //先送5AH，再送A5H到IAP触发寄存器，每次都需要如此
   63   1                                              //送完A5H后，IAP命令立即被触发启动
   64   1                                              //CPU等待IAP完成后，才会继续执行程序。
   65   1          _nop_();   //由于STC32G是多级流水线的指令系统，触发命令后建议加4个NOP，保证IAP_DATA的数据完成准备
   66   1          _nop_();
   67   1          _nop_();
   68   1          _nop_();
   69   1          EA = F0;    //恢复全局中断
   70   1      }
   71          
   72          //========================================================================
   73          // 函数: void EEPROM_SectorErase(u32 EE_address)
   74          // 描述: 擦除一个扇区.
   75          // 参数: EE_address:  要擦除的EEPROM的扇区中的一个字节地址.
   76          // 返回: none.
   77          // 版本: V1.0, 2014-6-30
   78          //========================================================================
   79          void EEPROM_SectorErase(u32 EE_address)
   80          {
   81   1          IAP_ENABLE();                       //设置等待时间，允许IAP操作，送一次就够
   82   1          IAP_ERASE();                        //宏调用, 送扇区擦除命令，命令不需改变时，不需重新送命令
   83   1                                              //只有扇区擦除，没有字节擦除，512字节/扇区。
   84   1                                              //扇区中任意一个字节地址都是扇区地址。
   85   1          IAP_ADDRE = (u8)(EE_address >> 16); //送扇区地址高字节（地址需要改变时才需重新送地址）
   86   1          IAP_ADDRH = (u8)(EE_address >> 8);  //送扇区地址中字节（地址需要改变时才需重新送地址）
   87   1          IAP_ADDRL = (u8)EE_address;         //送扇区地址低字节（地址需要改变时才需重新送地址）
   88   1          EEPROM_Trig();                      //触发EEPROM操作
   89   1          DisableEEPROM();                    //禁止EEPROM操作
   90   1      }
   91          
   92          //========================================================================
   93          // 函数: void EEPROM_read_n(u32 EE_address,u8 *DataAddress,u8 lenth)
   94          // 描述: 读N个字节函数.
   95          // 参数: EE_address:  要读出的EEPROM的首地址.
   96          //       DataAddress: 要读出数据的指针.
   97          //       length:      要读出的长度
   98          // 返回: 0: 写入正确.  1: 写入长度为0错误.  2: 写入数据错误.
   99          // 版本: V1.0, 2014-6-30
  100          //========================================================================
  101          void EEPROM_read_n(u32 EE_address,u8 *DataAddress,u8 length)
  102          {
  103   1          IAP_ENABLE();                           //设置等待时间，允许IAP操作，送一次就够
  104   1          IAP_READ();                             //送字节读命令，命令不需改变时，不需重新送命令
  105   1          do
  106   1          {
  107   2              IAP_ADDRE = (u8)(EE_address >> 16); //送地址高字节（地址需要改变时才需重新送地址）
  108   2              IAP_ADDRH = (u8)(EE_address >> 8);  //送地址中字节（地址需要改变时才需重新送地址）
  109   2              IAP_ADDRL = (u8)EE_address;         //送地址低字节（地址需要改变时才需重新送地址）
  110   2              EEPROM_Trig();                      //触发EEPROM操作
  111   2              *DataAddress = IAP_DATA;            //读出的数据送往
  112   2              EE_address++;
  113   2              DataAddress++;
  114   2          }while(--length);
  115   1      
  116   1          DisableEEPROM();
  117   1      }
  118          
  119          
  120          //========================================================================
  121          // 函数: u8 EEPROM_write_n(u32 EE_address,u8 *DataAddress,u8 length)
  122          // 描述: 写N个字节函数.
  123          // 参数: EE_address:  要写入的EEPROM的首地址.
C251 COMPILER V5.60.0,  EEPROM                                                             11/08/22  14:36:07  PAGE 3   

  124          //       DataAddress: 要写入数据的指针.
  125          //       length:      要写入的长度
  126          // 返回: 0: 写入正确.  1: 写入长度为0错误.  2: 写入数据错误.
  127          // 版本: V1.0, 2014-6-30
  128          //========================================================================
  129          u8 EEPROM_write_n(u32 EE_address,u8 *DataAddress,u8 length)
  130          {
  131   1          u8  i;
  132   1          u16 j;
  133   1          u8  *p;
  134   1          
  135   1          if(length == 0) return 1;   //长度为0错误
  136   1      
  137   1          IAP_ENABLE();                       //设置等待时间，允许IAP操作，送一次就够
  138   1          i = length;
  139   1          j = EE_address;
  140   1          p = DataAddress;
  141   1          IAP_WRITE();                            //宏调用, 送字节写命令
  142   1          do
  143   1          {
  144   2              IAP_ADDRE = (u8)(EE_address >> 16); //送地址高字节（地址需要改变时才需重新送地址）
  145   2              IAP_ADDRH = (u8)(EE_address >> 8);  //送地址中字节（地址需要改变时才需重新送地址）
  146   2              IAP_ADDRL = (u8)EE_address;         //送地址低字节（地址需要改变时才需重新送地址）
  147   2              IAP_DATA  = *DataAddress;           //送数据到IAP_DATA，只有数据改变时才需重新送
  148   2              EEPROM_Trig();                      //触发EEPROM操作
  149   2              EE_address++;                       //下一个地址
  150   2              DataAddress++;                      //下一个数据
  151   2          }while(--length);                       //直到结束
  152   1      
  153   1          EE_address = j;
  154   1          length = i;
  155   1          DataAddress = p;
  156   1          i = 0;
  157   1          IAP_READ();                             //读N个字节并比较
  158   1          do
  159   1          {
  160   2              IAP_ADDRE = (u8)(EE_address >> 16); //送地址高字节（地址需要改变时才需重新送地址）
  161   2              IAP_ADDRH = (u8)(EE_address >> 8);  //送地址中字节（地址需要改变时才需重新送地址）
  162   2              IAP_ADDRL = (u8)EE_address;         //送地址低字节（地址需要改变时才需重新送地址）
  163   2              EEPROM_Trig();                      //触发EEPROM操作
  164   2              if(*DataAddress != IAP_DATA)        //读出的数据与源数据比较
  165   2              {
  166   3                  i = 2;
  167   3                  break;
  168   3              }
  169   2              EE_address++;
  170   2              DataAddress++;
  171   2          }while(--length);
  172   1      
  173   1          DisableEEPROM();
  174   1          return i;
  175   1      }
  176          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       333     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------         17
  bit size             =    ------     ------
  ebit size            =    ------     ------
C251 COMPILER V5.60.0,  EEPROM                                                             11/08/22  14:36:07  PAGE 4   

  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
