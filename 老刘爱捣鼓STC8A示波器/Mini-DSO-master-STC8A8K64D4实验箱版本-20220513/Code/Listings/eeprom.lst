C51 COMPILER V9.59.0.0   EEPROM                                                            05/13/2022 11:55:20 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN .\Objects\eeprom.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE eeprom.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listi
                    -ngs\eeprom.lst) OBJECT(.\Objects\eeprom.obj)

line level    source

   1          /* EEPROM Functions. 
   2             Reference STC8 Series Datasheet */
   3          #include "eeprom.h"
   4          #include <reg51.h>
   5          
   6          //========================================================================
   7          // 函数: void DisableEEPROM(void)
   8          // 描述: 禁止EEPROM.
   9          // 参数: none.
  10          // 返回: none.
  11          // 版本: V1.0, 2014-6-30
  12          //========================================================================
  13          void DisableEEPROM(void)        //禁止访问EEPROM
  14          {
  15   1          IAP_CONTR = 0;          //关闭 IAP 功能
  16   1          IAP_CMD = 0;            //清除命令寄存器
  17   1          IAP_TRIG = 0;           //清除触发寄存器
  18   1          IAP_ADDRH = 0xff;       //将地址设置到非 IAP 区域
  19   1          IAP_ADDRL = 0xff;
  20   1      }
  21          
  22          //========================================================================
  23          // 函数: void EEPROM_Trig(void)
  24          // 描述: 触发EEPROM操作.
  25          // 参数: none.
  26          // 返回: none.
  27          // 版本: V1.0, 2014-6-30
  28          //========================================================================
  29          void EEPROM_Trig(void)
  30          {
  31   1          F0 = EA;    //保存全局中断
  32   1          EA = 0;     //禁止中断, 避免触发命令无效
  33   1          IAP_TRIG = 0x5A;
  34   1          IAP_TRIG = 0xA5;                    //先送5AH，再送A5H到IAP触发寄存器，每次都需要如此
  35   1                                              //送完A5H后，IAP命令立即被触发启动
  36   1                                              //CPU等待IAP完成后，才会继续执行程序。
  37   1          _nop_();
  38   1          _nop_();
  39   1          EA = F0;    //恢复全局中断
  40   1      }
  41          
  42          //========================================================================
  43          // 函数: void EEPROM_SectorErase(uint16 EE_address)
  44          // 描述: 擦除一个扇区.
  45          // 参数: EE_address:  要擦除的EEPROM的扇区中的一个字节地址.
  46          // 返回: none.
  47          // 版本: V1.0, 2014-6-30
  48          //========================================================================
  49          void EEPROM_SectorErase(uint16 EE_address)
  50          {
  51   1          IAP_ENABLE();                       //设置等待时间，允许IAP操作，送一次就够
  52   1          IAP_ERASE();                        //宏调用, 送扇区擦除命令，命令不需改变时，不需重新送命令
  53   1                                              //只有扇区擦除，没有字节擦除，512字节/扇区。
  54   1                                              //扇区中任意一个字节地址都是扇区地址。
C51 COMPILER V9.59.0.0   EEPROM                                                            05/13/2022 11:55:20 PAGE 2   

  55   1          IAP_ADDRH = EE_address / 256;       //送扇区地址高字节（地址需要改变时才需重新送地址）
  56   1          IAP_ADDRL = EE_address % 256;       //送扇区地址低字节
  57   1          EEPROM_Trig();                      //触发EEPROM操作
  58   1          DisableEEPROM();                    //禁止EEPROM操作
  59   1      }
  60          
  61          //========================================================================
  62          // 函数: void EEPROM_read_n(uint16 EE_address,uint8 *DataAddress,uint8 lenth)
  63          // 描述: 读N个字节函数.
  64          // 参数: EE_address:  要读出的EEPROM的首地址.
  65          //       DataAddress: 要读出数据的指针.
  66          //       length:      要读出的长度
  67          // 返回: none.
  68          // 版本: V1.0, 2014-6-30
  69          //========================================================================
  70          void EEPROM_read_n(uint16 EE_address,uint8 *DataAddress,uint8 length)
  71          {
  72   1          if(length == 0) return;   //长度为0错误
  73   1      
  74   1          IAP_ENABLE();                           //设置等待时间，允许IAP操作，送一次就够
  75   1          IAP_READ();                             //送字节读命令，命令不需改变时，不需重新送命令
  76   1          do
  77   1          {
  78   2              IAP_ADDRH = EE_address / 256;       //送地址高字节（地址需要改变时才需重新送地址）
  79   2              IAP_ADDRL = EE_address % 256;       //送地址低字节
  80   2              EEPROM_Trig();                      //触发EEPROM操作
  81   2              *DataAddress = IAP_DATA;            //读出的数据送往
  82   2              EE_address++;
  83   2              DataAddress++;
  84   2          }while(--length);
  85   1      
  86   1          DisableEEPROM();
  87   1      }
  88          
  89          
  90          //========================================================================
  91          // 函数: uint8 EEPROM_write_n(uint16 EE_address,uint8 *DataAddress,uint8 length)
  92          // 描述: 写N个字节函数.
  93          // 参数: EE_address:  要写入的EEPROM的首地址.
  94          //       DataAddress: 要写入数据的指针.
  95          //       length:      要写入的长度
  96          // 返回: 1: 写入正确.  0: 写入错误.
  97          // 版本: V1.0, 2014-6-30
  98          //========================================================================
  99          uint8 EEPROM_write_n(uint16 EE_address,uint8 *DataAddress,uint8 length)
 100          {
 101   1          uint8  i;
 102   1          uint16 j;
 103   1          uint8  *p;
 104   1          
 105   1          if(length == 0) return 0;   //长度为0错误
 106   1      
 107   1          IAP_ENABLE();                       //设置等待时间，允许IAP操作，送一次就够
 108   1          i = length;
 109   1          j = EE_address;
 110   1          p = DataAddress;
 111   1          IAP_WRITE();                            //宏调用, 送字节写命令
 112   1          do
 113   1          {
 114   2              IAP_ADDRH = EE_address / 256;       //送地址高字节（地址需要改变时才需重新送地址）
 115   2              IAP_ADDRL = EE_address % 256;       //送地址低字节
 116   2              IAP_DATA  = *DataAddress;           //送数据到IAP_DATA，只有数据改变时才需重新送
C51 COMPILER V9.59.0.0   EEPROM                                                            05/13/2022 11:55:20 PAGE 3   

 117   2              EEPROM_Trig();                      //触发EEPROM操作
 118   2              EE_address++;                       //下一个地址
 119   2              DataAddress++;                      //下一个数据
 120   2          }while(--length);                       //直到结束
 121   1      
 122   1          EE_address = j;
 123   1          length = i;
 124   1          DataAddress = p;
 125   1          i = 1;
 126   1          IAP_READ();                             //读N个字节并比较
 127   1          do
 128   1          {
 129   2              IAP_ADDRH = EE_address / 256;       //送地址高字节（地址需要改变时才需重新送地址）
 130   2              IAP_ADDRL = EE_address % 256;       //送地址低字节
 131   2              EEPROM_Trig();                      //触发EEPROM操作
 132   2              if(*DataAddress != IAP_DATA)        //读出的数据与源数据比较
 133   2              {
 134   3                  i = 0;
 135   3                  break;
 136   3              }
 137   2              EE_address++;
 138   2              DataAddress++;
 139   2          }while(--length);
 140   1      
 141   1          DisableEEPROM();
 142   1          return i;
 143   1      }
 144          
 145          
 146          /* Write EEPROM
 147             s: Pointer to parameters
 148             para_num: Length of parameters */
 149          bit EEPROM_Save(uint8 *s, uint8 para_num)
 150          {
 151   1              //扇区擦除
 152   1          EEPROM_SectorErase(IAP_ADDRESS); 
 153   1              //编程EEPROM
 154   1          return(EEPROM_write_n(IAP_ADDRESS,s,para_num));
 155   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    343    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      19
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
